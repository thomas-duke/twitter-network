import networkx as nx
from networkx.classes.graph import Graph
from itertools import product
from copy import deepcopy
from sklearn.model_selection import train_test_split


def create_graph(targets: dict) -> Graph:
    """Initialise an undirected NetworkX graph from an edge list.

        Args:
            targets: an adjacency list as a dictionary, with source nodes as keys
            and target nodes as values.

            kwargs: keyword arguments to be passed to nx.Graph.

        Returns:
            A NetworkX graph object.

    """
    sources = list(targets.keys())
    G = nx.Graph()
    for s in sources:
        edges = list(product([s], targets[s]))
        G.add_edges_from(edges)
    return G


def hide_edges(G: Graph, parameters: dict) -> Graph:
    """Remove a random subset of edges from an undirected graph.

        Args:
            G: a NetworkX undirected graph object.

            parameters: parameters defined in parameters.yml.

        Returns:
            A dictionary containing:
                subG: the subgraph of G generated by hiding edges.
                hidden: list of hidden edges.

    """
    edges = list(G.edges)
    edges_shown, edges_hidden = train_test_split(
        edges, test_size=parameters["N_hidden"]
    )
    subG = deepcopy(G)
    subG.remove_edges_from(edges_hidden)
    return dict(subG=subG, hidden=edges_hidden)
